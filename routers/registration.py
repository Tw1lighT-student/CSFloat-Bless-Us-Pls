from aiogram import Router, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.states import Registration
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from services.work_with_json import is_user_registered, save_user_key
from services.get_sales import get_steam_id
from filters.is_creator import IsCreatorFilter
from config.settings_bot import unborn_tier_1_id
from filters.is_not_banned import IsNotBannedFilter

router = Router()

# –ö–∞–∫ –±—É–¥—Ç–æ –±—ã –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–º–µ—â–∞—Ç—å 1 –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/help"), KeyboardButton(text="/reload_api_key")],
        [KeyboardButton(text="/get_items_resale"), KeyboardButton(text="/get_sale_stats")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@router.message(Command("start"), IsCreatorFilter())
async def cmd_start_creator(message: types.Message, state: FSMContext):
    if await is_user_registered(unborn_tier_1_id):
        await message.answer(
            "–†–∞–¥ –≤–Ω–æ–≤—å —É–≤–∏–¥–µ—Ç—å –º–æ–µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è~",
            reply_markup=main_menu_keyboard
        )
        await state.clear()  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        logging.info("–ù–∞—à –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±–∏—Ç–µ–ª—å –∑–ª–∞, –º–æ–π –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á CSFloat –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")
    await state.set_state(Registration.awaiting_key)
    logging.info(f"–ù–∞—à –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –æ–±–ª–∞–∂–∞—Ç—å—Å—è!")

@router.message(Command("start"), IsNotBannedFilter())
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if await is_user_registered(user_id):
        await message.answer(
            "üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard
        )
        await state.clear()  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        logging.info("User %s used /start (already registered)", user_id)
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSFloat :)\n"
                         "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π api –∫–ª—é—á —Å–∞–π—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")
    await state.set_state(Registration.awaiting_key)
    logging.info(f"User {message.from_user.id} called /start")

@router.message(Registration.awaiting_key)
async def handle_api_key(message: Message, state: FSMContext):
    user_input = message.text.strip()

    steam_id = await get_steam_id(user_input)
    if not steam_id:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await save_user_key(message.chat.id, user_input, steam_id)
    await message.answer("‚úÖ –í–∞—à API-–∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞")
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
    await state.clear()

@router.message(Command("help"), IsNotBannedFilter())
async def help_command(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/get_items_resale - –°–æ–±—Ä–∞—Ç—å (–æ–±–Ω–æ–≤–∏—Ç—å) –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±–æ—Ä–æ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "/get_sale_stats - –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "/reload_api_key - –ü–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π api –∫–ª—é—á"
    )
    logging.info(f"User {message.from_user.id} called /help")