from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.states import Parser, Registration
from services.work_with_json import get_user_key_by_id
import logging
from services.get_sales import fetch_all_sales, user_cache
from services.work_with_database import get_stats
from filters.is_not_banned import IsNotBannedFilter

router = Router()

def last_table_for(user_id: int):
    """–ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞–±–ª–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª –∑–∞–ø—Ä–æ—Å"""
    tables = user_cache.get(user_id)
    if not tables:
        return None
    return max(tables.items(), key=lambda kv: kv[1]["accessed"])[0]

@router.message(Command("reload_api_key"), IsNotBannedFilter())
async def reload_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –¥–ª—è CSFloat")
    await state.set_state(Registration.awaiting_key)
    logging.info(f"User {message.from_user.id} called /reload_api_key")

@router.message(Command("get_items_resale"), IsNotBannedFilter())
async def get_items_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤–≤–µ–¥–∏—Ç–µ 'All time'")
    await state.set_state(Parser.awaiting_weeks)
    logging.info(f"User {message.from_user.id} called /get_items_resale")

@router.message(Parser.awaiting_weeks)
async def weeks_input(message: Message, state: FSMContext):
    weeks = message.text.strip()
    if weeks == 'All time' or str(weeks).isdigit():
        api_key, steam_id = await get_user_key_by_id(message.chat.id)

        if not api_key:
            await message.answer(
                "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á."
            )
            await state.clear()
            return

        if str(weeks).isdigit():
            await fetch_all_sales(steam_id, api_key, message.from_user.id, int(weeks))
        else:
            await fetch_all_sales(steam_id, api_key, message.from_user.id)
        await message.answer('–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ–∫–æ–Ω—á–µ–Ω')
        await state.clear()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ —Å–∏–º–≤–æ–ª—ã, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—à–∏–º —É—Å–ª–æ–≤–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return

@router.message(Command("get_sale_stats"), IsNotBannedFilter())
async def send_stats_command(message: Message):
    table = last_table_for(message.from_user.id)
    if table is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ (/get_items_resale).")
        return

    stats = await get_stats(table)

    text = (
        "üìä *–û–±–æ—Ä–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞*\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total']['count']}\n"
        f"–û–±–æ—Ä–æ—Ç: {stats['total']['sum']} $\n\n"

        "üí∏ *–ü—Ä–æ–¥–∞–∂–∏*\n"
        f"  ‚Ä¢ {stats['sales']['count']} —à—Ç. / {stats['sales']['sum']} $\n"
        f"  ‚Ä¢ –î–æ—Ä–æ–∂–µ –≤—Å–µ–≥–æ: {stats['sales']['max']['item']} ‚Äì {stats['sales']['max']['price']} $\n"
        f"  ‚Ä¢ –î–µ—à–µ–≤–ª–µ –≤—Å–µ–≥–æ: {stats['sales']['min']['item']} ‚Äì {stats['sales']['min']['price']} $\n"
        f"  ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ —Ü–µ–Ω—ã: {stats['sales']['median']} $\n\n"

        "üõí *–ü–æ–∫—É–ø–∫–∏*\n"
        f"  ‚Ä¢ {stats['purchases']['count']} —à—Ç. / {stats['purchases']['sum']} $\n"
        f"  ‚Ä¢ –î–æ—Ä–æ–∂–µ –≤—Å–µ–≥–æ: {stats['purchases']['max']['item']} ‚Äì {stats['purchases']['max']['price']} $\n"
        f"  ‚Ä¢ –î–µ—à–µ–≤–ª–µ –≤—Å–µ–≥–æ: {stats['purchases']['min']['item']} ‚Äì {stats['purchases']['min']['price']} $\n"
        f"  ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ —Ü–µ–Ω—ã: {stats['purchases']['median']} $\n"
    )
    await message.answer(text, parse_mode="Markdown")
    logging.info(f"User {message.from_user.id} called /get_sale_stats")




